// Anchor client setup: load wallet and IDL from local files, create a typed Program client.

import {
  AnchorProvider,
  Wallet,
  Program,
  setProvider,
} from '@coral-xyz/anchor';
import { Connection, Keypair, clusterApiUrl } from '@solana/web3.js';
import fs from 'fs/promises';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';

// Types generated by Anchor
import type { StarkPqcVerifier } from '../../../../fixed/types/stark_pqc_verifier.ts';

// RPC and wallet config from env with sensible defaults
const RPC_URL = process.env.RPC_URL ?? clusterApiUrl('devnet');
const WALLET_PATH =
  process.env.ANCHOR_WALLET ??
  process.env.SOLANA_KEYPAIR ??
  `${process.env.HOME}/.config/solana/id.json`;

// Load keypair into an Anchor wallet
const secret = Uint8Array.from(
  JSON.parse(await fs.readFile(WALLET_PATH, 'utf8'))
);
const wallet = new Wallet(Keypair.fromSecretKey(secret));

// Provider and connection
export const connection = new Connection(RPC_URL, 'confirmed');
export const provider = new AnchorProvider(connection, wallet, {});
setProvider(provider);

// Read IDL from local build output
const __dirname = dirname(fileURLToPath(import.meta.url));
const idlPath = resolve(__dirname, '../../../../fixed/idl/stark_pqc_verifier.json');
const idl = JSON.parse(await fs.readFile(idlPath, 'utf8'));

// Construct typed Program
export const program = new Program<StarkPqcVerifier>(
  idl as StarkPqcVerifier,
  provider
);
